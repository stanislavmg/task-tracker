import telebot
from telebot.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from requests_toolbelt.multipart.encoder import MultipartEncoder
#from markups import main_menu_markup
import requests

api_key='7707206046:AAHaRoz0RWsKRXMxO9yXKFkMUCDS2uVzkJ8' 
bot = telebot.TeleBot(api_key)

users = [] #login, pass, session_id
def get_path_to_handler(handler:str):
    return 'http://localhost:8080/v1/'+handler

def is_login(login:str) -> bool:
    logins = [user['login'] for user in users]
    if(login in logins):
        return True
    return False

def get_user_info(username):
    return [user for user in users if user['login'] == username][0]

def create_markup(labels:list):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for label in labels:
        but = telebot.types.KeyboardButton(label)
        markup.row(but)
    return markup

main_menu_commands = ['‚ûï –°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å', 'üì± –ú–æ–∏ –æ—á–µ—Ä–µ–¥–∏' ]
main_menu_markup = create_markup(main_menu_commands)


    
    


def start_bot():
    bot.infinity_polling()

@bot.message_handler(func=lambda _: True)
def echo_all(message:Message):
    if(not is_login(message.from_user.username)):
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å')
        bot.register_next_step_handler(message, login)
        return
    
    user_info = get_user_info(message.from_user.username)
    answer = f'–ü—Ä–∏–≤–µ—Ç! {user_info['login']}! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?'
    bot.send_message(message.chat.id, answer, reply_markup=main_menu_markup)
    bot.register_next_step_handler(message, main_menu)


def main_menu(message:Message):
    if(message.text not in main_menu_commands):
        bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑', reply_markup=main_menu_markup)
        bot.register_next_step_handler(message, main_menu)

    if(message.text == main_menu_commands[0]):      # Create queue
        bot.send_message(message.chat.id, '–ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å?\n–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. –î–ª—è –æ—Ç–º–µ–Ω—ã - –Ω–∞–ø–∏—à–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"')
        bot.register_next_step_handler(message, create_queue)
    elif (message.text == main_menu_commands[1]):   #Get my queues
        session_id = get_user_info(message.from_user.username)['session_id']
        queues = Handlers.get_all_queues(session_id)
        if(len(queues) == 0):
            bot.send_message(message.chat.id, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup= main_menu_markup)
            bot.register_next_step_handler(message, main_menu)
            return
        queues_markup = create_markup(make_uniq([queue['name'] for queue in queues]))
        queues_markup.add('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
        bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë', reply_markup= queues_markup)
        bot.register_next_step_handler(message, queue_info)

def login(message:Message):
    if(not message.text.isalnum() or len(message.text) < 5 ):
        bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ —Ü–∏—Ñ—Ä –∏ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤. (–æ—Ç 6 —Å–∏–º–≤–æ–ª–æ–≤) ')
        bot.register_next_step_handler(message, login)
        return
    
    user_info = Handlers.login(message.from_user.username, message.text)
    bot.delete_message(message.chat.id, message.id)
    if(user_info == None):
        answer = f'–ù–µ —Ç–æ—Ç –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë!'
        bot.send_message(message.chat.id, answer)
        bot.register_next_step_handler(message, login)
        return
    users.append(user_info)
    answer = f'–ü—Ä–∏–≤–µ—Ç, {user_info['login']} - —Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?'
    bot.send_message(message.chat.id, answer, reply_markup=main_menu_markup)
    bot.register_next_step_handler(message, main_menu)

def create_queue(message:Message):
    if(message.text is None):
        bot.send_message(message.chat.id,'–Ø –Ω–µ –Ω–∞—à—ë–ª —Ç–µ–∫—Å—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑.')
        bot.register_next_step_handler(message, create_queue)
        return
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_markup)
        bot.send_message(message.chat.id, "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=main_menu_markup)
        bot.register_next_step_handler(message, main_menu)
        return
    if(not message.text.strip().isalnum()):
        bot.send_message(message.chat.id,'–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã')
        bot.register_next_step_handler(message, create_queue)
        return
    session_id = get_user_info(message.from_user.username)['session_id']
    queue = Handlers.create_queue(message.text.strip(), session_id)
    if(queue is None):
        answer = f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    else:
        answer = f'–û—á–µ—Ä–µ–¥—å {queue['name']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'

    bot.send_message(message.chat.id, answer, reply_markup=main_menu_markup)
    bot.register_next_step_handler(message, main_menu)

def queue_info(message:Message):
    session_id = get_user_info(message.from_user.username)['session_id']
    possible_queues = Handlers.get_all_queues(session_id)


    queues_names = [queue['name'] for queue in possible_queues]
    queues_names.append('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
    queues_names = make_uniq(queues_names)
    
    queues_markup = create_markup(queues_names)

    if message.text is None or message.text not in queues_names:
        bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª', reply_markup= queues_markup)
        bot.register_next_step_handler(message, queue_info)
        return

    if message.text == queues_names[-1]:
        bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', reply_markup = main_menu_markup)
        bot.register_next_step_handler(message, main_menu)
        return


    selected_queue = [queue for queue in possible_queues if queue['name'] == message.text] [0]
    tickets = Handlers.get_queue_tickets(selected_queue, session_id)
    if tickets is None or len(tickets) == 0:
        marks = create_markup(['‚úíÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å', '‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ','üìÖ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        bot.send_message(message.chat.id, '–ó–∞–¥–∞–Ω–∏–π –µ—â—ë –Ω–µ—Ç. –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–µ  ?', reply_markup = marks)
        bot.register_next_step_handler(message, create_ticket, selected_queue)
        return   
    else:
        ticket_names = ['‚úíÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å']+[ticket['title'] for ticket in tickets] + ['‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ','üìÖ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        tickets_markup = create_markup(ticket_names)
        bot.send_message(message.chat.id, f'–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –æ—á–µ—Ä–µ–¥–∏ {selected_queue['name']}:', reply_markup = tickets_markup)
        bot.register_next_step_handler(message, ticket_info, selected_queue)
    
def edit_queue(message:Message, current_queue):
    marks = create_markup(['‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è','‚ùå –ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'üìÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
    bot.send_message(message.chat.id, '–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', reply_markup = marks)
    bot.register_next_step_handler(message, edit_queue2, current_queue)
    
def edit_queue2(message:Message, current_queue):
    session_id = get_user_info(message.from_user.username)['session_id']

    posible_answers = ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è','‚ùå –ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'üìÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    if message.text is None or message.text not in posible_answers:
        marks = create_markup(posible_answers)
        bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª', reply_markup = marks)
        bot.register_next_step_handler(message, edit_queue2, current_queue)
        return
    
    if message.text == posible_answers[-1]:
        marks = create_markup(posible_answers)
        bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = main_menu_markup)
        bot.register_next_step_handler(message, main_menu)
        return
    
    if message.text == posible_answers[0]:
        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username. –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"')
        bot.register_next_step_handler(message, add_user_to_queue, current_queue)
        return
    elif message.text == posible_answers[1]:
        users = Handlers.get_queue_users(session_id, current_queue['id'])
        user_names = [user['login'] for user in users]
        user_names.append('‚ùå –û—Ç–º–µ–Ω–∞')
        user_marks = create_markup(user_names)
        bot.send_message(message.chat.id, '–ö–æ–≥–æ –±—É–¥–µ–º —É–±–∏—Ä–∞—Ç—å?', reply_markup=user_marks)#, reply_markup=
        bot.register_next_step_handler(message, remove_user_from_queue, current_queue)
        return
    
def make_uniq(l:list):
    unique_list = []
    seen = set()
    for item in l:
        if item not in seen:
            unique_list.append(item)
            seen.add(item)
    return unique_list

def add_user_to_queue(message:Message, current_queue):
    session_id = get_user_info(message.from_user.username)['session_id']
    if message.text == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = main_menu_markup)
        bot.register_next_step_handler(message, main_menu)
        return

    if message.text == None or not message.text.startswith('@'):
        bot.send_message(message.chat.id, '–ù–µ –≤–∞–ª–∏–¥–Ω—ã–π –ª–æ–≥–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –≤ —Ñ–æ—Ä–º–∞—Ç–µ (@username)')
        bot.register_next_step_handler(message, add_user_to_queue, current_queue)
        return
    user = Handlers.get_user_by_login(session_id, message.text)
    if user == '_':
        bot.send_message(message.chat.id, '–ù–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –≤ —Ñ–æ—Ä–º–∞—Ç–µ (@username)')
        bot.register_next_step_handler(message, add_user_to_queue, current_queue)
        return


    if Handlers.add_user_to_queue(session_id, current_queue['id'], user['id']):
        bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å')
        bot.send_message(message.chat.id, '–í–æ–∑—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_menu_markup)
        bot.register_next_step_handler(message, main_menu)
        return
    
    else:
        bot.send_message(message.chat.id, f'–ù–µ —É–¥–∞–ª–æ—Å—å ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        bot.send_message(message.chat.id, '–í–æ–∑—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_menu_markup)
        bot.register_next_step_handler(message, main_menu)


def remove_user_from_queue(message:Message, current_queue):
    session_id = get_user_info(message.from_user.username)['session_id']
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = main_menu_markup)
        bot.register_next_step_handler(message, main_menu)
        return
    
    if message.text == None or not message.text.startswith('@'):
        bot.send_message(message.chat.id, '–ù–µ –≤–∞–ª–∏–¥–Ω—ã–π –ª–æ–≥–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –≤ —Ñ–æ—Ä–º–∞—Ç–µ (@username)')
        bot.register_next_step_handler(message, add_user_to_queue, current_queue)
        return
    user = Handlers.get_user_by_login(session_id, message.text)
    if user == '_':
        bot.send_message(message.chat.id, '–ù–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –≤ —Ñ–æ—Ä–º–∞—Ç–µ (@username)')
        bot.register_next_step_handler(message, add_user_to_queue, current_queue)
        return
    
    if Handlers.remove_user_from_queue(session_id, current_queue['id'], user['id']):
        bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏')
        bot.send_message(message.chat.id, '–í–æ–∑—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_menu_markup)
        bot.register_next_step_handler(message, main_menu)
        return
    
    else:
        bot.send_message(message.chat.id, f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        bot.send_message(message.chat.id, '–í–æ–∑—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_menu_markup)
        bot.register_next_step_handler(message, main_menu)
    


def create_ticket(message:Message, current_queue):
    if message.text == '‚úíÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å':
        edit_queue(message, current_queue)
        return
    marks_names = ['‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ','üìÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    marks = create_markup(marks_names)

    if message.text is None or message.text not in marks_names :
        bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑', reply_markup = marks)
        bot.register_next_step_handler(message, create_ticket, current_queue)
        return
    
    if message.text == marks_names[-1]:
        bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', reply_markup = main_menu_markup)
        bot.register_next_step_handler(message, main_menu)
        return
    
    if message.text == marks_names[0]:
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è')
        bot.register_next_step_handler(message, task_name, current_queue)
        return
    
def task_name(message:Message, cureent_queue):
    if message.text is None:
        bot.send_message(message.chat.id, '–Ø –Ω–µ –Ω–∞—à—ë–ª —Ç–µ–∫—Å—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑')
        bot.register_next_step_handler(message, task_name, cureent_queue)
        return
    
    bot.send_message(message.chat.id, '–ü–æ–ª—É—á–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏')
    bot.register_next_step_handler(message, task_description, cureent_queue, message.text)

def task_description(message:Message, cureent_queue, task_name):
    session_id = get_user_info(message.from_user.username)['session_id']

    if message.text is None:
        bot.send_message(message.chat.id, '–Ø –Ω–µ –Ω–∞—à—ë–ª —Ç–µ–∫—Å—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑')
        bot.register_next_step_handler(message, task_description, cureent_queue, task_name)
        return
    
    bot.send_message(message.chat.id, '–ü–æ–ª—É—á–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ')
    description = message.text
    hardcode_status = 1
    if Handlers.create_ticket(session_id, cureent_queue['id'], task_name, description, hardcode_status):
        bot.send_message(message.chat.id, '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', reply_markup = main_menu_markup)
        bot.register_next_step_handler(message, main_menu)
        return
    else:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = main_menu_markup)
        bot.register_next_step_handler(message, main_menu)
        return

def ticket_info(message:Message, current_queue):
    if message.text == '‚úíÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å':
        edit_queue(message, current_queue)
        return
    
    session_id = get_user_info(message.from_user.username)['session_id']
    if message.text == 'üìÖ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', reply_markup = main_menu_markup)
        bot.register_next_step_handler(message, main_menu)
        return
    if message.text == '‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ':
        create_ticket(message, current_queue)
        return

    tickets = Handlers.get_queue_tickets(current_queue, session_id)
    if tickets is None or len(tickets) == 0:
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–∞–ª–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup= main_menu_markup)
        bot.register_next_step_handler(message, main_menu)
        return
    ticket_names = [queue['title'] for queue in tickets]
    if message.text is None or message.text not in ticket_names:
        queues_markup = create_markup(ticket_names)
        queues_markup.add('üìÖ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª', reply_markup= queues_markup)
        bot.register_next_step_handler(message, ticket_info, current_queue)
        return
    
    curent_ticket = [ticket for ticket in tickets if ticket['title'] == message.text][0]
    status_name =''
    status_id = int(curent_ticket['status_id'])
    if(status_id == 1 ):
        status_name = '–û—Ç–∫—Ä—ã—Ç'
    elif (status_id == 2):
        status_name = '–í —Ä–∞–±–æ—Ç–µ'
    else:
        status_name = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
    
        
    if 'performer_id' in curent_ticket:
        users = Handlers.get_all_users(session_id)
        performer_login = [user['login'] for user in users if int(user['id']) == int(curent_ticket['performer_id'])][0]  
    else:
        performer_login = '–ù–µ—Ç'
    answer = f'''
*–ù–∞–∑–≤–∞–Ω–∏–µ:* {clear_string(curent_ticket['title'])}
*–û–ø–∏—Å–∞–Ω–∏–µ:* {clear_string(curent_ticket['description'])}
*–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {clear_string(performer_login)}
*–°—Ç–∞—Ç—É—Å:* {clear_string(curent_ticket['status_id'])}
*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* {clear_string(curent_ticket['priority'])}
*–°—Ç–∞—Ç—É—Å:* {clear_string(status_name)}
*–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* {clear_string(curent_ticket['created_date'][:10])}
*–ê–≤—Ç–æ—Ä:* {clear_string(curent_ticket['author_login'])}
    '''

    bot.send_message(message.chat.id, answer, parse_mode='Markdown')
    marks = create_markup(['üõ†Ô∏è –°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å','üéØ –ù–∞–∑–Ω–∞—á–∏—Ç—å(—Å–º–µ–Ω–∏—Ç—å) –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', 'üìÖ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
    bot.send_message(message.chat.id, '–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', reply_markup= marks)
    bot.register_next_step_handler(message, edit_ticket, curent_ticket)

def clear_string(string:str):
    return str(string).replace('[','').replace(']','').replace('_','').replace('*','')

def edit_ticket(message:Message, ticket):
    posible_answers = ['üõ†Ô∏è –°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å','üéØ –ù–∞–∑–Ω–∞—á–∏—Ç—å(—Å–º–µ–Ω–∏—Ç—å) –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', 'üìÖ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    if message.text == 'üìÖ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', reply_markup = main_menu_markup)
        bot.register_next_step_handler(message, main_menu)
        return
    if message.text is None or message.text not in posible_answers :
        marks = create_markup(posible_answers)
        bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª')
        bot.send_message(message.chat.id, '–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', reply_markup= marks)
        bot.register_next_step_handler(message, edit_ticket, ticket)
        return
    elif message.text == posible_answers[0]:
        marks = create_markup(['–û—Ç–∫—Ä—ã—Ç','–í —Ä–∞–±–æ—Ç–µ','–ó–∞–≤–µ—Ä—à–µ–Ω–æ'])
        bot.send_message(message.chat.id, '–ù–∞ –∫–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å –±—É–¥–µ–º –º–µ–Ω—è—Ç—å?', reply_markup= marks)
        bot.register_next_step_handler(message, change_status, ticket)
        return 
    
    elif message.text == posible_answers[1]:
        marks = create_markup(['–û—Ç–∫—Ä—ã—Ç','–í —Ä–∞–±–æ—Ç–µ','–ó–∞–≤–µ—Ä—à–µ–Ω–æ'])
        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ–º—É –∑–∞–¥–∞—á—É.')
        bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ')
        bot.register_next_step_handler(message, change_performer, ticket)
        return
    

def change_status(message:Message, ticket):
    marks_names = ['–û—Ç–∫—Ä—ã—Ç','–í —Ä–∞–±–æ—Ç–µ','–ó–∞–≤–µ—Ä—à–µ–Ω–æ']

    if message.text is None or message.text not in marks_names:
        marks = ['–û—Ç–∫—Ä—ã—Ç','–í —Ä–∞–±–æ—Ç–µ','–ó–∞–≤–µ—Ä—à–µ–Ω–æ']
        bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª')
        bot.send_message(message.chat.id, '–ù–∞ –∫–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å –±—É–¥–µ–º –º–µ–Ω—è—Ç—å?', reply_markup= marks)
        bot.register_next_step_handler(message, change_status)
        return
    session_id = get_user_info(message.from_user.username)['session_id']


    if Handlers.update_ticket(session_id, ticket, marks_names.index(message.text), None):
        bot.send_message(message.chat.id, '–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup= main_menu_markup)
        bot.register_next_step_handler(message, main_menu)
        return
    else:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup= main_menu_markup)
        bot.register_next_step_handler(message, main_menu)
        return

def change_performer(message:Message, ticket):
    if message.text == None or not message.text.startswith('@'):
        bot.send_message(message.chat.id, '–ù–µ –≤–∞–ª–∏–¥–Ω—ã–π –ª–æ–≥–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –≤ —Ñ–æ—Ä–º–∞—Ç–µ (@username)')
        bot.register_next_step_handler(message, change_performer, ticket)
        return
    
    session_id = get_user_info(message.from_user.username)['session_id']
    user = Handlers.get_user_by_login(session_id, message.text)
    if user == '_':
        bot.send_message(message.chat.id, '–ù–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –≤ —Ñ–æ—Ä–º–∞—Ç–µ (@username)')
        bot.register_next_step_handler(message, change_performer, ticket)
        return
    
    if Handlers.update_ticket(session_id, ticket, None, user['id']):
        bot.send_message(message.chat.id, f'–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['login']} ')
        bot.send_message(message.chat.id, '–í–æ–∑—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_menu_markup)
        bot.register_next_step_handler(message, main_menu)
        return
    
    else:
        bot.send_message(message.chat.id, f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        bot.send_message(message.chat.id, '–í–æ–∑—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_menu_markup)
        bot.register_next_step_handler(message, main_menu)


class Handlers:
    @staticmethod
    def login(user_name, password):
       
        Handlers.register(user_name, password) 
        url = get_path_to_handler('login')
        multipart_data = MultipartEncoder(
        fields={
            "login": user_name,
            "password": password
        })
        r = requests.post(url=url, data=multipart_data, headers={"Content-Type": multipart_data.content_type}, timeout=5)
        if(r.status_code != 200):
            print('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—Å—è', r)
            return None
        response = r.json()

        user_info = {'login':user_name, 'password':password, 'session_id':response['id']}
        return user_info

    @staticmethod
    def register(user_name, password):
        url = get_path_to_handler('register')
        multipart_data = MultipartEncoder(
        fields={
            "login": user_name,
            "password": password
        })    

        r = requests.post(url=url, data=multipart_data, headers={"Content-Type": multipart_data.content_type}, timeout=5)
        if(r.status_code != 200):
            print('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∞—Ç—å—Å—è', r)
            return None
        response = r.json()
        return response['id']
    
    @staticmethod
    def unregister():
        pass
    @staticmethod
    def get_all_queues(session_id):
        url = get_path_to_handler('queues')    
        headers = {'X-Ya-User-Ticket': session_id}

        r = requests.get(url=url,headers=headers, timeout=5)
        if(r.status_code != 200):
            print('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—á–µ—Ä–µ–¥–∏', r)
            return None
        response = r.json()
        return response['items']
    
    @staticmethod
    def create_queue(queue_name, session_id):
        url = get_path_to_handler('queues')
        data = {
            'name':queue_name
        }    
        headers = {'X-Ya-User-Ticket': session_id}
        r = requests.post(url=url, json=data, headers=headers, timeout=5)
        if(r.status_code != 200):
            print('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å. –¢–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–Ω—è—Ç–æ', r)
            return None
        response = r.json()
        return response
    
    @staticmethod
    def get_queue_tickets(queue, session_id):
        url = get_path_to_handler(f'queues/{queue['id']}/tickets')  
        
        headers = {'X-Ya-User-Ticket': session_id}
        r = requests.get(url=url, headers=headers, timeout=5)
        if(r.status_code != 200):
            print('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', r)
            return None
        response = r.json()
        return response['items']


    @staticmethod
    def get_user_by_login(session_id, username:str):
        if username.startswith('@'):
            username = username.replace('@','')

        print(username)
        url = get_path_to_handler(f'users/{username}')
        headers = {'X-Ya-User-Ticket': session_id}
        r = requests.get(url=url, headers=headers, timeout=5)
        if(r.status_code != 200):
            print('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', r)
            return '_'
        response = r.json()
        return response

    @staticmethod
    def get_all_users(session_id):
        
        url = get_path_to_handler(f'users')
        headers = {'X-Ya-User-Ticket': session_id}
        r = requests.get(url=url, headers=headers, timeout=5)
        if(r.status_code != 200):
            print('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', r)
            return '_'
        response = r.json()
        return response['items']
    
    @staticmethod
    def update_queue():
        pass
    @staticmethod
    def delete_queue():
        pass
    @staticmethod
    def get_queue_users(session_id, queue_id):
        url = get_path_to_handler(f'queues/{queue_id}/users')   
        headers = {'X-Ya-User-Ticket': session_id}
        r = requests.get(url=url, headers=headers, timeout=5)
        if(r.status_code != 200):
            print('–ù–µ —É–¥–∞–ª–æ—Å—å ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å', r)
            return None
        response = r.json()
        return response['items']

    
    @staticmethod
    def add_user_to_queue(session_id, queue_id, user_id):
        url = get_path_to_handler(f'queues/{queue_id}/users/{user_id}')   
        headers = {'X-Ya-User-Ticket': session_id}
        r = requests.post(url=url, headers=headers, timeout=5)
        if(r.status_code != 200):
            print('–ù–µ —É–¥–∞–ª–æ—Å—å ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å', r)
            return None
        response = r.json()
        return response
        

    @staticmethod
    def remove_user_from_queue(session_id, queue_id, user_id):
        url = get_path_to_handler(f'queues/{queue_id}/users/{user_id}')   
        headers = {'X-Ya-User-Ticket': session_id}
        r = requests.delete(url=url, headers=headers, timeout=5)
        if(r.status_code != 200):
            print('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏', r)
            return None
        response = r.json()
        return response
    
    @staticmethod
    def create_ticket(session_id, queue_id, name, description, status):
        url = get_path_to_handler('tickets')
        data = {
            'title':name,
            'description': description,
            'status_id': status,
            'queue_id': queue_id,
        }    
        headers = {'X-Ya-User-Ticket': session_id}
        r = requests.post(url=url, json=data, headers=headers, timeout=5)
        if(r.status_code != 200):
            print('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π ticket', r)
            return None
        response = r.json()
        return response

    @staticmethod
    def get_ticket():
        pass


    @staticmethod
    def update_ticket(session_id, ticket, status_id, performer_id):
        url = get_path_to_handler(f'tickets/{ticket['id']}')
        if status_id is not None:
            ticket['status_id'] =  status_id + 1
        if performer_id is not None:
            ticket['performer_id'] =  performer_id
            
        headers = {'X-Ya-User-Ticket': session_id}
        r = requests.post(url=url, json=ticket, headers=headers, timeout=5)
        if(r.status_code != 200):
            print('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å ticket', r)
            return None
        response = r.json()
        return response
    
    @staticmethod
    def delete_ticket():
        pass
    @staticmethod
    def get_all_comments():
        pass
    @staticmethod
    def create_comment():
        pass
    @staticmethod
    def get_comment():
        pass
    @staticmethod
    def update_comment():
        pass
    @staticmethod
    def delete_comment():
        pass

print('–ó–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞')
start_bot()
